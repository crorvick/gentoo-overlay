From 156938829af43fd0d537a2c130dc782f5c47953d Mon Sep 17 00:00:00 2001
From: Chris Rorvick <chris@rorvick.com>
Date: Thu, 15 Sep 2016 22:08:27 -0500
Subject: [PATCH 2/3] modernize auto(conf|make) API usage

---
 Makefile.am       |  2 +-
 configure.in      |  7 ++++---
 file/acinclude.m4 | 56 ++-----------------------------------------------------
 file/configure.in | 35 ++++++++++------------------------
 file/readelf.c    | 12 ------------
 file/readelf.h    |  7 -------
 6 files changed, 17 insertions(+), 102 deletions(-)

diff --git a/Makefile.am b/Makefile.am
index e5cdb0c..e173836 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -27,7 +27,7 @@ EXTRA_DIST = $(man_MANS) acconfig.h jpeg-6b bf_locl.h bf_pi.h blowfish.h \
 #CFLAGS	= @CFLAGS@ -Wall -g
 CFLAGS	= -O2 -Wall -g
 
-INCLUDES = $(JPEGINC) $(FILEINC) -I$(srcdir)/compat $(EVENTINC) $(GTKINC)
+AM_CPPFLAGS = $(JPEGINC) $(FILEINC) -I$(srcdir)/compat $(EVENTINC) $(GTKINC)
 
 EXTRA_PROGRAMS = xsteg
 bin_PROGRAMS = stegdetect stegbreak stegcompare stegdeimage @XSTEG@
diff --git a/configure.in b/configure.in
index a549ffd..e4ef8ca 100644
--- a/configure.in
+++ b/configure.in
@@ -3,7 +3,7 @@ AC_INIT(stegdetect.c, 0.6, provos@citi.umich.edu)
 AC_CANONICAL_TARGET
 AC_CONFIG_SRCDIR(stegdetect.c)
 
-AM_INIT_AUTOMAKE(stegdetect, 0.6)
+AM_INIT_AUTOMAKE
 AM_CONFIG_HEADER(config.h)
 
 dnl Initialize prefix.
@@ -14,6 +14,7 @@ fi
 dnl Checks for programs.
 AC_PROG_CXX
 AC_PROG_CC
+AM_PROG_AS
 AC_C_INLINE
 AC_PROG_INSTALL
 
@@ -139,12 +140,12 @@ AC_EGREP_CPP(yes,
 #ifdef timeradd
 yes
 #endif
-],      [ AC_DEFINE(HAVE_TIMERADD)
+],      [ AC_DEFINE(HAVE_TIMERADD, 1, [Is timeradd defined in sys/time.h])
           AC_MSG_RESULT([yes])], AC_MSG_RESULT([no])
 )
 
 dnl Other stuff
-AC_DEFINE_UNQUOTED(_PATH_RULES, "$prefix/share/stegbreak/rules.ini")
+AC_DEFINE_UNQUOTED(_PATH_RULES, "$prefix/share/stegbreak/rules.ini", [Path to rules config])
 AC_C_BIGENDIAN
 
 AC_CONFIG_SUBDIRS(jpeg-6b file)
diff --git a/file/acinclude.m4 b/file/acinclude.m4
index 696aec5..7b4f2d8 100644
--- a/file/acinclude.m4
+++ b/file/acinclude.m4
@@ -1,19 +1,3 @@
-dnl cloned from autoconf 2.13 acspecific.m4
-AC_DEFUN(AC_C_LONG_LONG,
-[AC_CACHE_CHECK(for long long, ac_cv_c_long_long,
-[if test "$GCC" = yes; then
-  ac_cv_c_long_long=yes
-else
-AC_TRY_RUN([int main() {
-long long foo = 0;
-exit(sizeof(long long) < sizeof(long)); }],
-ac_cv_c_long_long=yes, ac_cv_c_long_long=no)
-fi])
-if test $ac_cv_c_long_long = yes; then
-  AC_DEFINE(HAVE_LONG_LONG)
-fi
-])
-
 dnl from autoconf 2.13 acgeneral.m4, with patch:
 dnl Date: Fri, 15 Jan 1999 05:52:41 -0800
 dnl Message-ID: <199901151352.FAA18237@shade.twinsun.com>
@@ -50,7 +34,7 @@ AC_CACHE_CHECK([for tm_isdst in struct tm], ac_cv_struct_tm_isdst,
 #include <$ac_cv_struct_tm>], [struct tm tm; tm.tm_isdst;],
   ac_cv_struct_tm_isdst=yes, ac_cv_struct_tm_isdst=no)])
 if test "$ac_cv_struct_tm_isdst" = yes; then
-  AC_DEFINE(HAVE_TM_ISDST)
+  AC_DEFINE(HAVE_TM_ISDST, 1, [Define if you have tm_isdst])
 fi
 AC_CACHE_CHECK(for daylight, ac_cv_var_daylight,
 [AC_TRY_LINK(
@@ -62,7 +46,7 @@ extern int daylight;
 changequote([, ])dnl
 [atoi(daylight);], ac_cv_var_daylight=yes, ac_cv_var_daylight=no)])
   if test $ac_cv_var_daylight = yes; then
-    AC_DEFINE(HAVE_DAYLIGHT)
+    AC_DEFINE(HAVE_DAYLIGHT, 1, [Define if you have daylight])
   fi
 ])
 
@@ -86,39 +70,3 @@ else
   AC_DEFINE_UNQUOTED($1, $2)
 fi
 ])
-
-dnl from autoconf 2.13 acgeneral.m4, with additional third argument
-dnl AC_CHECK_SIZEOF_INCLUDES(TYPE [, CROSS-SIZE, [INCLUDES]])
-AC_DEFUN(AC_CHECK_SIZEOF_INCLUDES,
-[changequote(<<, >>)dnl
-dnl The name to #define.
-define(<<AC_TYPE_NAME>>, translit(sizeof_$1, [a-z *], [A-Z_P]))dnl
-dnl The cache variable name.
-define(<<AC_CV_NAME>>, translit(ac_cv_sizeof_$1, [ *], [_p]))dnl
-changequote([, ])dnl
-AC_MSG_CHECKING(size of $1)
-AC_CACHE_VAL(AC_CV_NAME,
-[AC_TRY_RUN([$3
-#include <stdio.h>
-main()
-{
-  FILE *f=fopen("conftestval", "w");
-  if (!f) exit(1);
-  fprintf(f, "%d\n", sizeof($1));
-  exit(0);
-}], AC_CV_NAME=`cat conftestval`, AC_CV_NAME=0, ifelse([$2], , , AC_CV_NAME=$2))])dnl
-AC_MSG_RESULT($AC_CV_NAME)
-AC_DEFINE_UNQUOTED(AC_TYPE_NAME, $AC_CV_NAME)
-undefine([AC_TYPE_NAME])dnl
-undefine([AC_CV_NAME])dnl
-])
-
-dnl AC_CHECK_SIZEOF_STDC_HEADERS(TYPE [, CROSS_SIZE])
-AC_DEFUN(AC_CHECK_SIZEOF_STDC_HEADERS,
-[AC_CHECK_SIZEOF_INCLUDES($1, $2,
-[#include <sys/types.h>
-#ifdef STDC_HEADERS
-#include <stdlib.h>
-#endif
-])
-])
diff --git a/file/configure.in b/file/configure.in
index fc38bb1..2e184b4 100644
--- a/file/configure.in
+++ b/file/configure.in
@@ -1,14 +1,14 @@
 dnl Process this file with autoconf to produce a configure script.
-AC_INIT(file.c)
-AM_INIT_AUTOMAKE(file, 3.37)
-AM_CONFIG_HEADER(config.h)
+AC_INIT([file.c], [3.37])
+AM_INIT_AUTOMAKE
+AC_CONFIG_HEADER(config.h)
 
 AC_MSG_CHECKING(for builtin ELF support)
 AC_ARG_ENABLE(elf,
 [  --enable-elf            disable builtin ELF support],
 [if test "${enableval}" = yes; then
   AC_MSG_RESULT(yes)
-  AC_DEFINE(BUILTIN_ELF)
+  AC_DEFINE(BUILTIN_ELF, 1, [Disable builtin ELF support])
 else
   AC_MSG_RESULT(no)
 fi], [
@@ -21,13 +21,13 @@ AC_ARG_ENABLE(elf-core,
 [  --disable-elf-core       disable ELF core file support],
 [if test "${enableval}" = yes; then
   AC_MSG_RESULT(yes)
-  AC_DEFINE(ELFCORE)
+  AC_DEFINE(ELFCORE, 1, [Disable ELF core file support])
 else
   AC_MSG_RESULT(no)
 fi], [
   # enable by default
   AC_MSG_RESULT(yes)
-  AC_DEFINE(ELFCORE)
+  AC_DEFINE(ELFCORE, 1, [Disable ELF core file support])
 ])
 
 AC_MSG_CHECKING(for file formats in man section 5)
@@ -65,28 +65,13 @@ dnl Checks for typedefs, structures, and compiler characteristics.
 AC_C_CONST
 AC_TYPE_OFF_T
 AC_TYPE_SIZE_T
+AC_TYPE_UINT8_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+AC_TYPE_UINT64_T
 AC_STRUCT_ST_RDEV
 AC_STRUCT_TIMEZONE_DAYLIGHT
 
-dnl FIXME: only found in standard headers!
-AC_CHECK_TYPE(uint8_t, unsigned char)
-AC_CHECK_TYPE(uint16_t, unsigned short)
-AC_CHECK_TYPE(uint32_t, unsigned int)
-
-AC_C_LONG_LONG
-if test $ac_cv_c_long_long = yes; then
-  long64='unsigned long long';
-else
-  long64='unsigned long';
-fi
-dnl This needs a patch to autoconf 2.13 acgeneral.m4
-AC_CHECK_TYPE2(uint64_t, $long64)
-
-AC_CHECK_SIZEOF_STDC_HEADERS(uint8_t, 0)
-AC_CHECK_SIZEOF_STDC_HEADERS(uint16_t, 0)
-AC_CHECK_SIZEOF_STDC_HEADERS(uint32_t, 0)
-AC_CHECK_SIZEOF_STDC_HEADERS(uint64_t, 0)
-
 dnl Checks for functions
 AC_CHECK_FUNCS(mmap strerror strtoul)
 
diff --git a/file/readelf.c b/file/readelf.c
index b04c0b5..6504b0a 100644
--- a/file/readelf.c
+++ b/file/readelf.c
@@ -476,11 +476,7 @@ tryelf(fd, buf, nbytes)
 #ifdef ELFCORE
 			dophn_core(class, swap,
 				   fd,
-#ifdef USE_ARRAY_FOR_64BIT_TYPES
-				   getu32(swap, elfhdr.e_phoff[1]),
-#else
 				   getu64(swap, elfhdr.e_phoff),
-#endif
 				   getu16(swap, elfhdr.e_phnum), 
 				   getu16(swap, elfhdr.e_phentsize));
 #else
@@ -491,21 +487,13 @@ tryelf(fd, buf, nbytes)
 			if (getu16(swap, elfhdr.e_type) == ET_EXEC) {
 				dophn_exec(class, swap,
 					   fd,
-#ifdef USE_ARRAY_FOR_64BIT_TYPES
-					   getu32(swap, elfhdr.e_phoff[1]),
-#else
 					   getu64(swap, elfhdr.e_phoff),
-#endif
 					   getu16(swap, elfhdr.e_phnum), 
 					   getu16(swap, elfhdr.e_phentsize));
 			}
 			doshn(class, swap,
 			      fd,
-#ifdef USE_ARRAY_FOR_64BIT_TYPES
-			      getu32(swap, elfhdr.e_shoff[1]),
-#else
 			      getu64(swap, elfhdr.e_shoff),
-#endif
 			      getu16(swap, elfhdr.e_shnum),
 			      getu16(swap, elfhdr.e_shentsize));
 		}
diff --git a/file/readelf.h b/file/readelf.h
index 4f6205f..83859dc 100644
--- a/file/readelf.h
+++ b/file/readelf.h
@@ -15,16 +15,9 @@ typedef uint16_t	Elf32_Half;
 typedef uint32_t	Elf32_Word;
 typedef uint8_t		Elf32_Char;
 
-#if SIZEOF_UINT64_T != 8
-#define USE_ARRAY_FOR_64BIT_TYPES
-typedef	uint32_t 	Elf64_Addr[2];
-typedef	uint32_t 	Elf64_Off[2];
-typedef uint32_t 	Elf64_Xword[2];
-#else
 typedef	uint64_t 	Elf64_Addr;
 typedef	uint64_t 	Elf64_Off;
 typedef uint64_t 	Elf64_Xword;
-#endif
 typedef uint16_t	Elf64_Half;
 typedef uint32_t	Elf64_Word;
 typedef uint8_t		Elf64_Char;
-- 
2.10.0

